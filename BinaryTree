Prerder Traversal-Iteration-
-----------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        
        stk = []
        if not root:
            return []
        
        def helper(root):
            if not root:
                return []
            
            if root:
                stk.append(root.val)
                if root.left:
                    helper(root.left)
                if root.right: 
                    print(root.right)
                    helper(root.right)
        
        helper(root)
        return stk          
            
  ------------------------------------------
  Prerder Traversal-Recursive-
  # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        res = []
       
        if not root:
            return
        self.helper(root, res)
        return res
    
    def helper (self, root, res):
        
        if root:
            
            res.append(root.val)
            self.helper(root.left,res)
            self.helper(root.right,res)
 -------------------------------------------           
          
