#Bubble sort
b = [8,6,4,1,5,3,7] 
size = len(b)-1
for k in range(size):
    for i  in range(size):
        if b[i] > b[i+1]:
            b[i],b[i+1] = b[i+1],b[i]   
    size -= 1         
print(b)
#==============

# Selection sort
s = [2,7,4,1,5,3]
iMin = 0
temp =0

for i in range(0,len(s)-2):
    iMin = i
    for j in range(i+1, len(s)-1):
        if s[j] < s[iMin]:
           iMin = j
        
        s[i],s[iMin] = s[iMin],s[i]
print(s) 
#==================
#Insertion sort
#I = [2,7,4,1,5,3]
for j in range(1, len(I)):
        key = I[j]
            i = j-1
            while i >-1 and I[i] > key:
                I[i+1] = I[i]
               # print(i)
                i = i-1
            I[i+1] = key  
        print(I)     
#============
#s = "anagram"
#print(sorted(s))
#=================
# counting sort

nums = [3,3,2,4,2,5,0,6]

counts = [0] * (7)

for item in nums:
        counts[item] += 1
print(counts) 

num_items_before = 0
for i, count in enumerate(counts):
    counts[i] = num_items_before
    num_items_before += count
print(counts[i])  

sorted_list = [None] * len(nums)
for item in nums:
        sorted_list[ counts[item] ] = item
        counts[item] += 1
print(sorted_list )       
#---------------------
#Merge Sort -

nums = [5,2,3,1]

def sortArray(self, nums: List[int]):
    if len(nums) > 1:
           mid = len(nums)//2
            
            L = nums[:mid]
            R = nums[mid:]
            
            self.sortArray(L)
            self.sortArray(R)
            
            i = j = k = 0
            
            while i < len(L) and j < len(R):
                if L[i] < R[j]:
                    nums[k] = L[i]
                    i += 1
                else:
                    nums[k] = R[j]
                    j += 1
                
                k += 1
                
            while i < len(L):
                nums[k] = L[i]
                i += 1
                k += 1
            
            while j < len(R):
                nums[k] = R[j]
                j += 1
                k += 1
            pritn (nums)
        else :
            print(nums)
#=====================
# Wiggle Sort - an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....
nums =  [3,5,2,1,6,4]

nums.sort()
        
        for i in range(1,len(nums)-1, 2):
            nums[i], nums[i+1] = nums[i+1], nums[i]
  
#============================== 
# Quick Sort
nums  = [5,2,3,1]

def sortArray(self, nums: List[int]) :
       
        start = 0
        end = len(nums) - 1
        
        self.Qsort(nums, start, end)
        return nums
        #print(nums)
        #for i in range(len(nums) ):
            #print(nums[i])
    
    def Qsort(self, nums, start, end):
        
        if start < end:
            pindex = self.getPivot(nums, start, end)
        
            self.Qsort(nums, start, pindex-1)
            self.Qsort(nums, pindex+1, end)
        
    def getPivot(self,nums, start, end):
        
        pivot = nums[end]
        pindex = start
        
        for i in range(start,end):
            if nums[i] < pivot:
                nums[i], nums[pindex] = nums[pindex], nums[i]
                
                pindex += 1
        nums[pindex], nums[end] = nums[end], nums[pindex]
        
        return pindex
    
        
    
    





