
Kadane's Algorithm - by wikipedia - Kadane's algorithm scans the given array A[1....n] from left to right. In the jth step, it computes the subarray with the 
largest sum ending at j; this sum is maintained in variable current_sum Moreover, it computes the subarray with the largest sum anywhere in A[1....j], maintained in variable 
best_sum,and easily obtained as the maximum of all values of current_sum seen so far.

Kadane's algorithm is very handy when it comes to calculate subarray sum as below -

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        '''
        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
        Output: 6
        Explanation: [4,-1,2,1] has the largest sum = 6.
        
        Time complexity : O(n)
        Space complexity : O(1)
        '''
        
        if len(nums) <= 1 : return nums[0]
        
        curr_maxSum = nums[0]
        maxSum = nums[0]
        for i in range(1, len(nums)):
            curr_maxSum = max(nums[i], curr_maxSum + nums[i])
            maxSum = max(curr_maxSum , maxSum)
            
        return maxSum    
        
